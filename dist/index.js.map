{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/constant.js", "../src/xano/articles.js", "../src/utils/articles.js", "../src/utils/filter.js", "../src/utils/roles.js", "../src/utils/contentTypes.js", "../src/utils/cmsfilter.js", "../node_modules/@finsweet/ts-utils/dist/webflow/getSiteId.js", "../src/utils/test.js", "../src/index.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const API_HOST = 'https://x8ki-letl-twmt.n7.xano.io/api:n2wGC7P0'", "import { API_HOST } from '../constant'\n// Fetch articles\n\nexport const fetchArticles = async () => {\n  try {\n    const response = await fetch(`${API_HOST}/articles`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log('error:', error.message)\n    return [];\n  }\n};\n\nexport const fetchArticleById = async (id) => {\n  try {\n    const response = await fetch(`${API_HOST}/articles/${id}`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log('error:', error.message)\n    return [];\n  }\n}\n", "const createItem = (article, templateElement) => {\n  // Clone the template element\n  const newItem = templateElement.cloneNode(true);\n\n  // Query inner elements\n  const image = newItem.querySelector('[data-element=\"image\"]');\n  const title = newItem.querySelector('[data-element=\"title\"]');\n  const role = newItem.querySelector('[data-element=\"role\"]');\n  const description = newItem.querySelector('[data-element=\"description\"]');\n  const contentType = newItem.querySelector('[data-element=\"content-type\"]');\n  const articleLink = newItem.querySelector('[data-element=\"article-link\"]');\n\n  // Populate inner elements\n  if (image) image.src = article?.featuredImage?.url || '';\n  if (title) title.textContent = article.title;\n  if (role) role.textContent = article?._role?.role;\n  if (description) description.textContent = article.articleDescription;\n  if (contentType) {\n    contentType.textContent = article.content_type;\n    contentType.style.display = \"none\"\n  }\n  if (articleLink) {\n    articleLink.href = `articles/common?id=${article.id}`;\n  }\n\n  return newItem;\n};\n\nexport const showArticleList = async (listInstance, articles) => {\n  // Save a copy of the template\n  const [firstItem] = listInstance.items;\n  const itemTemplateElement = firstItem.element;\n  itemTemplateElement.style.opacity = 1;\n  itemTemplateElement.style.transform = \"\";\n  itemTemplateElement.style.transformStyle = \"\";\n\n  // Remove existing items\n  listInstance.clearItems();\n\n  // Create the new items\n  const newItems = articles.map((article) => createItem(article, itemTemplateElement));\n\n  // Populate the list\n  await listInstance.addItems(newItems);\n}\n", "export const createFilter = ({ label, value }, templateElement) => {\n  // Clone the template element\n  const newFilter = templateElement.cloneNode(true);\n\n  // Query inner elements\n  const labelSpan = newFilter.querySelector('span');\n  const radio = newFilter.querySelector('input');\n\n  if (!labelSpan || !radio) return;\n\n  // Populate inner elements\n  labelSpan.textContent = label;\n  radio.value = value;\n\n  return newFilter;\n};", "import { createFilter } from './filter'\n\nexport const addRoleFilter = async (filtersInstance, roles) => {\n  // Get the template filter\n  const filterTemplateElement = filtersInstance.form.querySelector('[data-element=\"filter-by-role\"]');\n  if (!filterTemplateElement) return;\n\n  // Get the parent wrapper\n  const filtersWrapper = filterTemplateElement.parentElement;\n  if (!filtersWrapper) return;\n\n  // Remove the template from the DOM\n  filterTemplateElement.remove();\n\n  // Create the new filters and append the to the parent wrapper\n  for (const role of roles) {\n    const newFilter = createFilter({ label: role.role, value: role.id }, filterTemplateElement);\n    if (!newFilter) continue;\n\n    filtersWrapper.append(newFilter);\n  }\n}\n", "import { createFilter } from './filter'\n\nexport const addContentTypeFilter = async (filtersInstance, data) => {\n  // Get the template filter\n  const filterTemplateElement = filtersInstance.form.querySelector('[data-element=\"filter-by-content-type\"]');\n  if (!filterTemplateElement) return;\n\n  // Get the parent wrapper\n  const filtersWrapper = filterTemplateElement.parentElement;\n  if (!filtersWrapper) return;\n\n  // Remove the template from the DOM\n  filterTemplateElement.remove();\n\n  // Create the new filters and append the to the parent wrapper\n  for (const contentType of data) {\n    const newFilter = createFilter({ label: contentType.ContentType, value: contentType.id }, filterTemplateElement);\n    if (!newFilter) continue;\n\n    filtersWrapper.append(newFilter);\n  }\n}\n", "import { fetchArticles } from '$xano/articles'\nimport { showArticleList } from './articles'\nimport { addRoleFilter } from './roles'\nimport { addContentTypeFilter } from './contentTypes'\n\n// cmsFilter\nexport const cmsFilter = async (filtersInstances) => {\n  // Get the filters instance\n  const [filtersInstance] = filtersInstances;\n\n  // Get the list instance\n  const { listInstance } = filtersInstance;\n  const { articles, roles, contentTypes } = await fetchArticles();\n\n  await showArticleList(listInstance, articles)\n  await addRoleFilter(filtersInstance, roles);\n  await addContentTypeFilter(filtersInstance, contentTypes);\n\n  // Sync the CMSFilters instance with the new created filters\n  filtersInstance.storeFiltersData();\n}\n\n", "/**\n * @returns The Webflow Site ID of the website.\n * @param page The page to get the site ID from. Defaults to the current page.\n */\nexport const getSiteId = (page = document) => page.documentElement.getAttribute('data-wf-site');\n", "/* eslint-disable no-console */\nimport { getSiteId } from '@finsweet/ts-utils';\n\nexport const greetUser = () => {\n  const siteId = getSiteId();\n\n  console.log(`${siteId} is the Webflow site id`);\n};\n", "import { cmsFilter } from \"$utils/cmsfilter\";\nimport { greetUser } from '$utils/test';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(greetUser);\n\nwindow.fsAttributes = window.fsAttributes || [];\n\nwindow.fsAttributes.push([\n  'cmsfilter',\n  cmsFilter\n])\n\nwindow.fsAttributes.push([\n  'cmsload',\n  (listInstances) => {\n    console.log('cmsload Successfully loaded!');\n\n    // The callback passes a `listInstances` array with all the `CMSList` instances on the page.\n    const [listInstance] = listInstances;\n\n    // The `renderitems` event runs whenever the list renders items after switching pages.\n    listInstance.on('renderitems', (renderedItems) => {\n      console.log('RenderedItem:', renderedItems);\n    });\n  },\n]);"],
  "mappings": "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",
  "names": []
}
